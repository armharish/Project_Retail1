package com.cts.retail.jdbc;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;

public class DBConnectUtils {

	private String dbURL;
	private String dbLoginId;
	private String dbLoginPwd;
	Connection con = null;
	
	public DBConnectUtils() {
		// TODO Auto-generated constructor stub
		
	}

	public DBConnectUtils(String driverType) {
		// TODO Auto-generated constructor stub
		try {
			  
				switch (driverType){
				
				case  "mysql":
					System.out.println("inside switch to register DB conection");
					Class.forName("com.mysql.jdbc.Driver").newInstance();
					break;
				
				default: 
					System.out.println("Driver in input is not supported" + driverType);
					break;
				}
		
		
		} catch (InstantiationException | IllegalAccessException
				|  ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	
	public DBConnectUtils  setPropertyFile(String str){
		return this;
	}
	
	public DBConnectUtils loadConnectionProperties(String PropertyFileName){
		
		Properties prop = new Properties();
		InputStream input = null;
		
		try {
			input = new FileInputStream(PropertyFileName);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			prop.load(input);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
			
		this.dbURL=prop.getProperty("DB_URL");
		this.dbLoginId=prop.getProperty("DB_LOGON_USER");
		this.dbLoginPwd=prop.getProperty("DB_LOGON_PWD");
		
		return this;
		
	}
	
	public void displayConnectionProperties(){
				
			System.out.println(this.dbURL);
			System.out.println(this.dbLoginId);
			System.out.println(this.dbLoginPwd);
			
		}
	
	
	public Connection dbEstablishConnection(){
	
		try {
			 con =DriverManager.getConnection(this.dbURL, this.dbLoginId, this.dbLoginPwd);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			System.out.println("Connection to database " + this.dbURL + "Failed! Check output console");
			e.printStackTrace();
		}
		
		return con;
	}


	public void dbCloseConnection(DBConnectUtils refOBJ){
		try {
			refOBJ.con.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
		
	public static void main(String[] args) throws SQLException {
		
		Statement stmt = null;
		ResultSet rs = null;
		
		DBConnectUtils utils = new DBConnectUtils("mysql");
		
		System.out.println("Inside Main: Prinitng Properties before loading");
		utils.displayConnectionProperties();
		System.out.println("Loading Properties");
		utils.loadConnectionProperties("config.properties");
		System.out.println("Inside Main: Prinitng Properties after loading");
		utils.displayConnectionProperties();
		Connection con=utils.dbEstablishConnection();
		stmt = con.createStatement();
		String file1="abcxyz.csv";
		//rs = stmt.executeQuery("select * from product.order_media");
		rs = stmt.executeQuery("SELECT * into OUTFILE'"+file1+"' FIELDS TERMINATED BY ',' FROM product.order_media");

	/*	while(rs.next()){
	          //Retrieve by column name
	          
	          String mediaCode = rs.getString("requested_media_code");
	         
	          //Display values
	          System.out.print("Media Code: " + mediaCode);

	       }*/
	       //STEP 6: Clean-up environment
	       rs.close();
	       stmt.close();
	       con.close();
	}
	//*/

}
